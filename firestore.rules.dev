rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ========= Helpers ========= */
    function isSignedIn() { return request.auth != null; }
    function userPath(u) { return /databases/$(database)/documents/users/$(u); }
    function userRole() {
      return isSignedIn()
        && exists(userPath(request.auth.uid))
        && (get(userPath(request.auth.uid)).data.role is string)
        ? get(userPath(request.auth.uid)).data.role
        : null;
    }
    function isTeacher() { return userRole() in ['teacher','admin']; }
    function isStudent() { return isSignedIn() && userRole() == 'student'; }
    function isOwner(uid) { return isSignedIn() && uid == request.auth.uid; }
    function hasField(obj, field) { return field in obj; }

    // Paths/helpers de assignments/attempts
    function assgPath(id)     { return /databases/$(database)/documents/assignments/$(id); }
    function attemptPath(id)  { return /databases/$(database)/documents/attempts/$(id); }

    function assgIsPublished(id) {
      return exists(assgPath(id))
        && hasField(get(assgPath(id)).data,'isPublished')
        && get(assgPath(id)).data.isPublished == true;
    }
    function assgOwner(id) {
      return exists(assgPath(id)) && hasField(get(assgPath(id)).data,'ownerUid')
        ? get(assgPath(id)).data.ownerUid : null;
    }
    function isAssigneeOfAssg(id, uid) {
      return exists(assgPath(id))
        && hasField(get(assgPath(id)).data,'assigneeUids')
        && (uid in get(assgPath(id)).data.assigneeUids);
    }

    /* ========= users ========= */
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if isSignedIn() && (isOwner(uid) || isTeacher());
      allow delete: if isTeacher();
    }

    /* ========= tags ========= */
    match /tags/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ========= problems ========= */
    match /problems/{id} {
      allow read: if isSignedIn();
      allow create: if isTeacher();
      allow update, delete: if isTeacher();
    }

    /* ========= classes ========= */
    match /classes/{id} {
      allow read: if isSignedIn();
      allow create: if isTeacher()
        && hasField(request.resource.data,'ownerUid')
        && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher();
    }

    /* ========= assignments ========= */
    match /assignments/{id} {
      function isOwnerOfAssg() {
        return hasField(resource.data,'ownerUid')
          && resource.data.ownerUid == request.auth.uid;
      }
      function isPublishedAssg() {
        return hasField(resource.data,'isPublished')
          && resource.data.isPublished == true;
      }
      function isAssignee() {
        return hasField(resource.data,'assigneeUids')
          && (request.auth.uid in resource.data.assigneeUids);
      }

      // GET: control fino por documento
      allow get: if isSignedIn() && (
        isTeacher() ? isOwnerOfAssg() : (isPublishedAssg() && isAssignee())
      );

      // LIST: permisivo; Firestore aplicar√° 'get' por cada doc devuelto
      allow list: if isSignedIn();

      allow create: if isTeacher()
        && hasField(request.resource.data,'ownerUid')
        && request.resource.data.ownerUid == request.auth.uid;

      allow update, delete: if isTeacher() && isOwnerOfAssg();
    }

    /* ========= attempts ========= */
    match /attempts/{id} {
      // GET individual (tolerante a docs viejos sin studentUid)
      allow get: if !exists(attemptPath(id))
        ? isStudent()
        : (
            isTeacher() ||
            (isStudent() &&
             hasField(get(attemptPath(id)).data,'studentUid') &&
             get(attemptPath(id)).data.studentUid == request.auth.uid)
          );

      // LIST: permisivo; 'get' filtra por doc
      allow list: if isSignedIn();

      // Crear: solo alumno asignado en assignment publicado
      allow create: if isStudent()
        && hasField(request.resource.data,'studentUid')
        && request.resource.data.studentUid == request.auth.uid
        && hasField(request.resource.data,'assignmentId')
        && assgIsPublished(request.resource.data.assignmentId)
        && isAssigneeOfAssg(request.resource.data.assignmentId, request.auth.uid)
        && hasField(request.resource.data,'answers')
        && (request.resource.data.answers is list)
        && (hasField(request.resource.data,'finishedAt') ? request.resource.data.finishedAt == null : true)
        && (!hasField(request.resource.data,'ownerUid')
            || request.resource.data.ownerUid == assgOwner(request.resource.data.assignmentId));

      // Actualizar: mismo alumno, intento abierto, sin cambiar identidad
      allow update: if isStudent()
        && exists(attemptPath(id))
        && hasField(get(attemptPath(id)).data,'studentUid')
        && get(attemptPath(id)).data.studentUid == request.auth.uid
        && hasField(get(attemptPath(id)).data,'assignmentId')
        && get(attemptPath(id)).data.finishedAt == null
        && request.resource.data.studentUid == get(attemptPath(id)).data.studentUid
        && request.resource.data.assignmentId == get(attemptPath(id)).data.assignmentId;

      allow delete: if isTeacher();
    }

    /* ========= submissions ========= */
    match /submissions/{id} {
      // LIST permisivo; filtro por doc en GET
      allow list: if isSignedIn();

      allow get: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data,'studentUid') && resource.data.studentUid == request.auth.uid)
      );

      allow create, update: if isSignedIn() && (
        isTeacher() ||
        (hasField(request.resource.data,'studentUid') && request.resource.data.studentUid == request.auth.uid)
      );

      allow delete: if isTeacher();
    }

    /* ========= achievements ========= */
    match /achievements/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ========= fallback ========= */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
