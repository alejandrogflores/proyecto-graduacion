rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ===== Helpers ===== */
    function isSignedIn() { return request.auth != null; }
    function userDoc(uid) { return get(/databases/$(database)/documents/users/$(uid)); }
    function userRole() { return isSignedIn() ? userDoc(request.auth.uid).data.role : null; }
    function isTeacher() { return isSignedIn() && (userRole() in ['teacher','admin']); }
    function isOwner(uid) { return isSignedIn() && (uid == request.auth.uid); }
    function hasField(obj, field) { return field in obj; }

    /* ===== users ===== */
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if isSignedIn() && (isOwner(uid) || isTeacher());
      allow delete: if isTeacher();
    }

    /* ===== tags ===== */
    match /tags/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ===== problems ===== */
    match /problems/{id} {
      allow read: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data, 'visibility') && resource.data.visibility == 'public') ||
        (hasField(resource.data, 'ownerUid') && resource.data.ownerUid == request.auth.uid)
      );
      allow create: if isTeacher();
      allow update, delete: if isTeacher() &&
        hasField(resource.data, 'ownerUid') && resource.data.ownerUid == request.auth.uid;
    }

    /* ===== classes ===== */
    match /classes/{id} {
      allow read: if isSignedIn();
      allow create: if isTeacher() &&
        hasField(request.resource.data, 'ownerUid') &&
        request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher();
    }

    /* ===== assignments ===== */
    match /assignments/{id} {

    function isOwnerOfAssg() {
        return ("ownerUid" in resource.data) &&
            resource.data.ownerUid == request.auth.uid;
    }

    function isPublishedAssg() {
        return ("isPublished" in resource.data) &&
            resource.data.isPublished == true;
    }

    // ðŸ‘‡ Blindaje 100%: si no existe/ no es array, NO evalÃºa `in`
    function isAssignee() {
        return ("assigneeUids" in resource.data)
        ? (request.auth.uid in resource.data.assigneeUids)
        : false;
    }

    // Solo evalÃºa la rama de tu rol
    allow read: if isSignedIn() && (
        isTeacher()
        ? isOwnerOfAssg()
        : (isPublishedAssg() && isAssignee())
    );

    allow create: if isTeacher() &&
                    ("ownerUid" in request.resource.data) &&
                    request.resource.data.ownerUid == request.auth.uid;

    allow update, delete: if isTeacher() && isOwnerOfAssg();
    }

    /* ===== attempts ===== */
    match /attempts/{id} {
      allow read: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data, 'studentUid') &&
         resource.data.studentUid == request.auth.uid)
      );

      allow create: if isSignedIn() &&
        hasField(request.resource.data, 'studentUid') &&
        request.resource.data.studentUid == request.auth.uid;

      allow update: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data, 'studentUid') &&
         request.resource.data.studentUid == request.auth.uid)
      );

      allow delete: if isTeacher();
    }

    /* ===== submissions / achievements ===== */
    match /submissions/{id} {
      allow read: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data, 'studentUid') &&
         resource.data.studentUid == request.auth.uid)
      );
      allow write: if isSignedIn() && (
        isTeacher() ||
        (hasField(request.resource.data, 'studentUid') &&
         request.resource.data.studentUid == request.auth.uid)
      );
    }

    match /achievements/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ===== fallback ===== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}



