rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ===== Helpers ===== */
    function isSignedIn() { return request.auth != null; }
    function userPath(u) { return /databases/$(database)/documents/users/$(u); }
    function userRole() {
      return isSignedIn()
        && exists(userPath(request.auth.uid))
        && (get(userPath(request.auth.uid)).data.role is string)
        ? get(userPath(request.auth.uid)).data.role
        : null;
    }
    function isTeacher() { return userRole() in ['teacher','admin']; }
    function isStudent() { return isSignedIn() && (userRole() == 'student'); }
    function isOwner(uid) { return isSignedIn() && (uid == request.auth.uid); }
    function hasField(obj, field) { return field in obj; }

    // assignments helpers
    function assgPath(id) { return /databases/$(database)/documents/assignments/$(id); }
    function assgDoc(id)  { return get(assgPath(id)); }
    function isAssigneeOnAssg(a) {
      return ("assigneeUids" in a.data) && (request.auth.uid in a.data.assigneeUids);
    }

    // ✅ attempts helper (faltaba)
    function attemptPath(id) { return /databases/$(database)/documents/attempts/$(id); }

    /* ===== users ===== */
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if isSignedIn() && (isOwner(uid) || isTeacher());
      allow delete: if isTeacher();
    }

    /* ===== tags ===== */
    match /tags/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ===== problems ===== */
    match /problems/{id} {
      allow read: if isSignedIn();
      allow create: if isTeacher();
      allow update, delete: if isTeacher()
        && hasField(resource.data,'ownerUid')
        && resource.data.ownerUid == request.auth.uid;
    }

    /* ===== classes ===== */
    match /classes/{id} {
      allow read: if isSignedIn();
      allow create: if isTeacher()
        && hasField(request.resource.data,'ownerUid')
        && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher();
    }

    /* ===== assignments ===== */
    match /assignments/{id} {
      function isOwnerOfAssg() {
        return ("ownerUid" in resource.data) && resource.data.ownerUid == request.auth.uid;
      }
      function isPublishedAssg() {
        return ("isPublished" in resource.data) && resource.data.isPublished == true;
      }
      function isAssignee() {
        return ("assigneeUids" in resource.data)
          ? (request.auth.uid in resource.data.assigneeUids)
          : false;
      }

      allow read: if isSignedIn() && (
        isTeacher() ? isOwnerOfAssg() : (isPublishedAssg() && isAssignee())
      );

      allow create: if isTeacher()
        && ("ownerUid" in request.resource.data)
        && request.resource.data.ownerUid == request.auth.uid;

      allow update, delete: if isTeacher() && isOwnerOfAssg();
    }

    /* ===== attempts ===== */
    match /attempts/{id} {

      // Lectura de doc individual:
      // - si NO existe, permite que el alumno consulte sin romper
      // - si existe, teacher o el propio alumno
      allow read: if !exists(attemptPath(id))
                  ? isStudent()
                  : (
                      isTeacher() ||
                      (isStudent() && get(attemptPath(id)).data.studentUid == request.auth.uid)
                    );

      // Listados / agregaciones (getCountFromServer) -> solo docentes
      allow list: if isTeacher();

      // Crear (alumno asignado a assignment publicada)
      allow create: if isStudent()
        && hasField(request.resource.data,'studentUid')
        && request.resource.data.studentUid == request.auth.uid
        && hasField(request.resource.data,'assignmentId')
        && exists(assgPath(request.resource.data.assignmentId))
        && assgDoc(request.resource.data.assignmentId).data.isPublished == true
        && isAssigneeOnAssg(assgDoc(request.resource.data.assignmentId))
        && (!hasField(request.resource.data,'ownerUid')
            || request.resource.data.ownerUid == assgDoc(request.resource.data.assignmentId).data.ownerUid)
        && hasField(request.resource.data,'answers')
        && (request.resource.data.answers is list)
        && (hasField(request.resource.data,'finishedAt') ? request.resource.data.finishedAt == null : true);

      // Actualizar (mientras no esté finalizado y sin cambiar ids)
      allow update: if isStudent()
        && exists(attemptPath(id))
        && (get(attemptPath(id)).data.studentUid == request.auth.uid)
        && (get(attemptPath(id)).data.finishedAt == null)
        && request.resource.data.studentUid == get(attemptPath(id)).data.studentUid
        && request.resource.data.assignmentId == get(attemptPath(id)).data.assignmentId;

      // Borrar
      allow delete: if isTeacher();
    }

    /* ===== submissions / achievements ===== */
    match /submissions/{id} {
      allow read: if isSignedIn() && (
        isTeacher() ||
        (hasField(resource.data,'studentUid') && resource.data.studentUid == request.auth.uid)
      );
      allow write: if isSignedIn() && (
        isTeacher() ||
        (hasField(request.resource.data,'studentUid') && request.resource.data.studentUid == request.auth.uid)
      );
    }

    match /achievements/{id} {
      allow read: if isSignedIn();
      allow write: if isTeacher();
    }

    /* ===== fallback ===== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}




