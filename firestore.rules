rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ==== Helpers ==== */
    function isSignedIn() { return request.auth != null; }

    // Lee el rol desde /users/{uid} en la DB
    function userRole() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }

    function isTeacher() {
      return isSignedIn() && (userRole() in ['teacher', 'admin']);
    }

    function isStudent() {
      return isSignedIn() && (userRole() == 'student');
    }

    function isOwner(uid) {
      return isSignedIn() && (uid == request.auth.uid);
    }

    /* ==== users ==== */
    match /users/{uid} {
      // Cualquiera autenticado puede leer perfiles básicos
      allow read: if isSignedIn();
      // El propio usuario puede escribir su doc; teacher/admin también
      allow write: if isOwner(uid) || isTeacher();
    }

    /* ==== classes ==== */
    match /classes/{id} {
      allow read: if isSignedIn();
      // Crear solo teacher/admin y que coincida ownerUid
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      // Actualizar/eliminar solo teacher/admin
      allow update, delete: if isTeacher();
    }

    /* ==== tags ==== */
    match /tags/{id} {
      // Lectura para cualquiera autenticado (ajusta a `true` si los quieres públicos sin login)
      allow read: if isSignedIn();
      // Escritura solo teacher/admin
      allow create, update, delete: if isTeacher();
    }

    /* ==== problems ==== */
    match /problems/{id} {
      // LECTURA:
      //  - públicos para cualquier autenticado (students/teachers)
      //  - o para teachers/admin
      //  - o para el dueño/creador aunque sea privado
      allow read: if
        (isSignedIn() && resource.data.visibility == "public") ||
        isTeacher() ||
        (isSignedIn() &&
          (resource.data.ownerUid == request.auth.uid ||
           resource.data.createdBy == request.auth.uid));

      // ESCRITURA: crear/editar/borrar solo teacher/admin
      // (en create exigimos que el ownerUid sea el autor del request)
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher();
    }

    /* ==== assignments ==== */
    match /assignments/{id} {
      // Teacher/Admin: acceso total
      allow read: if isTeacher()
               // Student: solo si publicado y dirigido al usuario
               || (isStudent()
                   && resource.data.isPublished == true
                   && (
                        // si usas arreglo de uids
                        (resource.data.assigneeUids != null
                          && request.auth.uid in resource.data.assigneeUids)
                        ||
                        // si usas mapa {uid:true}
                        (resource.data.assignees != null
                          && resource.data.assignees[request.auth.uid] == true)
                      )
                  );

      // Crear/editar/eliminar assignments: solo teacher/admin
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher();
    }

    /* ==== attempts ==== */
    match /attempts/{id} {
      // Leer: el dueño del intento o teacher/admin
      allow read: if (isSignedIn() && isOwner(resource.data.ownerUid)) || isTeacher();

      // Crear: student y el ownerUid debe ser el suyo
      allow create: if isStudent()
                 && request.resource.data.ownerUid == request.auth.uid
                 && request.resource.data.assignmentId is string
                 && request.resource.data.createdAt != null;

      // Actualizar: dueño (si necesitas limitar, puedes exigir un estado no-finalizado)
      allow update: if isStudent() && isOwner(resource.data.ownerUid);
      // Borrar: solo teacher/admin
      allow delete: if isTeacher();
    }

    /* ==== catch-all (bloquea todo lo no especificado) ==== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}






